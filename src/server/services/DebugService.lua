-- src/server/services/DebugService.lua
-- –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

local BaseService = require(ReplicatedStorage.Shared.BaseService)

-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∫–æ–º–∞–Ω–¥
local PlayerCommands = require(script.Parent.debug.PlayerCommands)
local ExperienceCommands = require(script.Parent.debug.ExperienceCommands)
local ValidationCommands = require(script.Parent.debug.ValidationCommands)
local SystemCommands = require(script.Parent.debug.SystemCommands)
local WorldCommands = require(script.Parent.debug.WorldCommands)
local CharacterCommands = require(script.Parent.debug.CharacterCommands)

local DebugService = setmetatable({}, { __index = BaseService })
DebugService.__index = DebugService

function DebugService.new()
	local self = setmetatable(BaseService.new("DebugService"), DebugService)

	self.Commands = {}
	self.AdminPlayers = {} -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å admin player ID's

	-- –ú–æ–¥—É–ª–∏ –∫–æ–º–∞–Ω–¥
	self.PlayerCommands = PlayerCommands.new(self)
	self.ExperienceCommands = ExperienceCommands.new(self)
	self.ValidationCommands = ValidationCommands.new(self)
	self.SystemCommands = SystemCommands.new(self)
	self.WorldCommands = WorldCommands.new(self)
	self.CharacterCommands = CharacterCommands.new(self)

	return self
end

function DebugService:OnInitialize()
	-- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	self:RegisterCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã", function(player, _)
		self:ShowHelp(player)
	end)

	self:RegisterCommand("commands", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", function(player, _)
		self:ShowCategorizedHelp(player)
	end)

	self:RegisterCommand("search", "–ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥: /search [—Å–ª–æ–≤–æ]", function(player, args)
		local keyword = args[1]
		self:SearchCommands(player, keyword)
	end)

	-- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–æ–¥—É–ª–µ–π
	print("[DEBUG SERVICE] Registering Player commands...")
	self.PlayerCommands:RegisterCommands()

	print("[DEBUG SERVICE] Registering Experience commands...")
	self.ExperienceCommands:RegisterCommands()

	print("[DEBUG SERVICE] Registering Validation commands...")
	self.ValidationCommands:RegisterCommands()

	print("[DEBUG SERVICE] Registering System commands...")
	self.SystemCommands:RegisterCommands()

	print("[DEBUG SERVICE] Registering World commands...")
	self.WorldCommands:RegisterCommands()

	print("[DEBUG SERVICE] Registering Character commands...")
	self.CharacterCommands:RegisterCommands()

	print("[DEBUG SERVICE] All command modules registered successfully!")

	-- –í—ã–≤–æ–¥–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
	local commandCount = 0
	for _ in pairs(self.Commands) do
		commandCount = commandCount + 1
	end
	print("[DEBUG SERVICE] Total commands registered: " .. commandCount)
end

function DebugService:OnStart()
	-- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞
	self:SetupChatHandler()
	print("[DEBUG SERVICE] Chat handler ready")
	print("[DEBUG SERVICE] Debug commands available: /help –∏–ª–∏ /commands")
end

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–∞—Ç–∞
function DebugService:SetupChatHandler()
	if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
		-- –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞
		self:ConnectEvent(TextChatService.MessageReceived, function(textChatMessage)
			local player = Players:GetPlayerByUserId(textChatMessage.TextSource.UserId)
			if player then
				self:ProcessChatMessage(player, textChatMessage.Text)
			end
		end)
		print("[DEBUG SERVICE] Connected to new TextChatService")
	else
		-- –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞
		self:ConnectEvent(Players.PlayerAdded, function(player)
			if player.Chatted then
				self:ConnectEvent(player.Chatted, function(message)
					self:ProcessChatMessage(player, message)
				end)
			end
		end)

		-- –î–ª—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
		for _, player in ipairs(Players:GetPlayers()) do
			if player.Chatted then
				self:ConnectEvent(player.Chatted, function(message)
					self:ProcessChatMessage(player, message)
				end)
			end
		end
		print("[DEBUG SERVICE] Connected to legacy chat system")
	end
end

-- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
function DebugService:RegisterCommand(commandName, description, callback)
	if self.Commands[commandName] then
		warn("[DEBUG SERVICE] Command /" .. commandName .. " already exists! Overwriting...")
	end

	self.Commands[commandName] = {
		Description = description,
		Callback = callback,
	}
	print("[DEBUG SERVICE] Registered command: /" .. commandName .. " - " .. description)
end

-- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function DebugService:ProcessChatMessage(player, message)
	if message:sub(1, 1) ~= "/" then
		return
	end

	-- –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	local parts = {}
	for part in message:gmatch("%S+") do
		table.insert(parts, part)
	end

	if #parts == 0 then
		return
	end

	local commandName = parts[1]:sub(2):lower() -- –£–±–∏—Ä–∞–µ–º "/" –∏ –¥–µ–ª–∞–µ–º lowercase
	local args = {}

	for i = 2, #parts do
		table.insert(args, parts[i])
	end

	-- –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
	self:ExecuteCommand(player, commandName, args)
end

-- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
function DebugService:ExecuteCommand(player, commandName, args)
	local command = self.Commands[commandName]
	if not command then
		self:SendMessage(
			player,
			"‚ùå –ö–æ–º–∞–Ω–¥–∞ /"
				.. commandName
				.. " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
		)
		return
	end

	print("[DEBUG] " .. player.Name .. " executed command: /" .. commandName .. " " .. table.concat(args, " "))

	local success, result = pcall(command.Callback, player, args)
	if not success then
		warn("[DEBUG] Error executing command /" .. commandName .. ": " .. tostring(result))
		self:SendMessage(player, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: " .. tostring(result))
	end
end

-- –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å (–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–æ–º)
function DebugService:ShowHelp(player)
	self:SendMessage(player, "=== –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ ===")

	-- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
	local commandsList = {}
	for commandName, command in pairs(self.Commands) do
		table.insert(commandsList, {
			name = commandName,
			description = command.Description,
		})
	end

	table.sort(commandsList, function(a, b)
		return a.name < b.name
	end)

	-- –í—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã –ø–æ 10 —à—Ç—É–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	local count = 0
	for _, cmd in ipairs(commandsList) do
		self:SendMessage(player, "/" .. cmd.name .. " - " .. cmd.description)
		count = count + 1

		-- –ö–∞–∂–¥—ã–µ 15 –∫–æ–º–∞–Ω–¥ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
		if count % 15 == 0 then
			wait(0.1)
		end
	end

	self:SendMessage(player, "--- –ò–¢–û–ì–û ---")
	self:SendMessage(player, "–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: " .. #commandsList)
	self:SendMessage(player, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commands –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
end

-- –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function DebugService:ShowCategorizedHelp(player)
	self:SendMessage(player, "=== –ö–û–ú–ê–ù–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===")

	-- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π
	local categories = {
		["üéÆ –û—Å–Ω–æ–≤–Ω—ã–µ"] = {
			commands = { "help", "commands", "search" },
			description = "–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ –∏ –ø–æ–∏—Å–∫–∞",
		},

		["üë§ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞"] = {
			commands = { "stats", "addgold", "setgold", "addattr", "resetattr", "savedata", "reloaddata" },
			description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏–≥—Ä–æ–∫–∞",
		},

		["‚ù§Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂"] = {
			commands = {
				"damage",
				"heal",
				"kill",
				"respawn",
				"invul",
				"regen",
				"sethealth",
				"setmana",
				"setstamina",
				"charinfo",
				"speed",
				"jump",
				"consumestamina",
				"teleport",
				"resetchar",
				"godmode",
				"ghost",
			},
			description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º",
		},

		["‚≠ê –û–ø—ã—Ç –∏ —É—Ä–æ–≤–Ω–∏"] = {
			commands = { "addxp", "setexp", "settotalexp", "setlevel", "xpdiag", "fixexp", "xpcalc", "simulate" },
			description = "–°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è",
		},

		["üåç –ú–∏—Ä –∏ –≤—Ä–µ–º—è"] = {
			commands = {
				"time",
				"settime",
				"day",
				"night",
				"dawn",
				"dusk",
				"timespeed",
				"pausetime",
				"resumetime",
				"fasttime",
				"normaltime",
				"worldinfo",
				"saveworld",
				"loadworld",
			},
			description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º",
		},

		["üîß –í–∞–ª–∏–¥–∞—Ü–∏—è"] = {
			commands = { "valstats", "testval", "resetval", "valtest", "valdebug" },
			description = "–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
		},

		["üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞"] = {
			commands = { "perf", "memory", "services", "players", "gc", "benchmark", "network", "uptime" },
			description = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
		},
	}

	for categoryName, categoryData in pairs(categories) do
		self:SendMessage(player, "")
		self:SendMessage(player, categoryName .. " - " .. categoryData.description)
		self:SendMessage(player, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

		local foundCommands = 0
		for _, commandName in ipairs(categoryData.commands) do
			local command = self.Commands[commandName]
			if command then
				self:SendMessage(player, "  /" .. commandName .. " - " .. command.Description)
				foundCommands = foundCommands + 1
			end
		end

		if foundCommands == 0 then
			self:SendMessage(player, "  (–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
		end

		-- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
		wait(0.05)
	end

	self:SendMessage(player, "")
	self:SendMessage(player, "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")

	-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	local totalCommands = 0
	for _ in pairs(self.Commands) do
		totalCommands = totalCommands + 1
	end
	self:SendMessage(player, "üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ —Å–∏—Å—Ç–µ–º–µ: " .. totalCommands)
end

-- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
function DebugService:SendMessage(player, message)
	local ServiceManager = require(script.Parent.Parent.ServiceManager)
	local RemoteService = ServiceManager:GetService("RemoteService")

	if RemoteService ~= nil and RemoteService:IsReady() then
		RemoteService:SendSystemMessage(player, message, "INFO")
	else
		-- Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —á–∞—Ç–∞
		print("[DEBUG MESSAGE TO " .. player.Name .. "] " .. message)
	end
end

-- –ü–æ–ª—É—á–∏—Ç—å ServiceManager (–¥–ª—è –º–æ–¥—É–ª–µ–π)
function DebugService:GetServiceManager()
	return require(script.Parent.Parent.ServiceManager)
end

-- –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
function DebugService:GetCommandsList()
	local commandsList = {}
	for commandName, command in pairs(self.Commands) do
		table.insert(commandsList, {
			Name = commandName,
			Description = command.Description,
		})
	end

	-- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
	table.sort(commandsList, function(a, b)
		return a.Name < b.Name
	end)

	return commandsList
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
function DebugService:IsCommandAvailable(commandName)
	return self.Commands[commandName] ~= nil
end

-- –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
function DebugService:GetCommandInfo(commandName)
	return self.Commands[commandName]
end

-- –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
function DebugService:GetCommandStats()
	return {
		TotalCommands = self:GetCommandCount(),
		RegisteredModules = {
			"PlayerCommands",
			"ExperienceCommands",
			"ValidationCommands",
			"SystemCommands",
			"WorldCommands",
			"CharacterCommands",
		},
		ChatSystemType = TextChatService.ChatVersion == Enum.ChatVersion.TextChatService and "New" or "Legacy",
	}
end

-- –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
function DebugService:GetCommandCount()
	local count = 0
	for _ in pairs(self.Commands) do
		count = count + 1
	end
	return count
end

-- –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
function DebugService:SearchCommands(player, keyword)
	if not keyword or keyword == "" then
		self:SendMessage(
			player,
			"‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: /search <—Å–ª–æ–≤–æ>"
		)
		return
	end

	keyword = keyword:lower()
	local foundCommands = {}

	for commandName, command in pairs(self.Commands) do
		if commandName:lower():find(keyword) or command.Description:lower():find(keyword) then
			table.insert(foundCommands, {
				name = commandName,
				description = command.Description,
			})
		end
	end

	if #foundCommands == 0 then
		self:SendMessage(
			player,
			"‚ùå –ö–æ–º–∞–Ω–¥—ã —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '" .. keyword .. "' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
		)
		return
	end

	table.sort(foundCommands, function(a, b)
		return a.name < b.name
	end)

	self:SendMessage(player, "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è '" .. keyword .. "':")
	for _, cmd in ipairs(foundCommands) do
		self:SendMessage(player, "  /" .. cmd.name .. " - " .. cmd.description)
	end
	self:SendMessage(player, "–ù–∞–π–¥–µ–Ω–æ: " .. #foundCommands .. " –∫–æ–º–∞–Ω–¥")
end

function DebugService:OnCleanup()
	-- –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	self.Commands = {}

	-- –û—á–∏—â–∞–µ–º –º–æ–¥—É–ª–∏
	self.PlayerCommands = nil
	self.ExperienceCommands = nil
	self.ValidationCommands = nil
	self.SystemCommands = nil
	self.WorldCommands = nil
	self.CharacterCommands = nil

	print("[DEBUG SERVICE] Debug service cleaned up")
end

return DebugService
