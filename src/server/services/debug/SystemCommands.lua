-- src/server/services/debug/SystemCommands.lua
-- –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

local Players = game:GetService("Players")

local SystemCommands = {}
SystemCommands.__index = SystemCommands

function SystemCommands.new(debugService)
	local self = setmetatable({}, SystemCommands)
	self.DebugService = debugService
	return self
end

function SystemCommands:RegisterCommands()
	local debugService = self.DebugService

	debugService:RegisterCommand(
		"perf",
		"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
		function(player, _)
			self:ShowPerformanceStats(player)
		end
	)

	debugService:RegisterCommand("memory", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏", function(player, _)
		self:ShowMemoryInfo(player)
	end)

	debugService:RegisterCommand("services", "–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", function(player, _)
		self:ShowServicesStatus(player)
	end)

	debugService:RegisterCommand("players", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö", function(player, _)
		self:ShowPlayersInfo(player)
	end)

	debugService:RegisterCommand("gc", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞", function(player, _)
		self:ForceGarbageCollection(player)
	end)

	debugService:RegisterCommand(
		"benchmark",
		"–ë–µ–Ω—á–º–∞—Ä–∫ —Å–∏—Å—Ç–µ–º—ã: /benchmark [—Ç–∏–ø]",
		function(player, args)
			local benchmarkType = args[1] or "basic"
			self:RunBenchmark(player, benchmarkType)
		end
	)

	debugService:RegisterCommand("network", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏", function(player, _)
		self:ShowNetworkStats(player)
	end)

	debugService:RegisterCommand("uptime", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞", function(player, _)
		self:ShowUptimeInfo(player)
	end)
end

-- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function SystemCommands:ShowPerformanceStats(player)
	local ServiceManager = self.DebugService:GetServiceManager()

	self.DebugService:SendMessage(player, "=== –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===")

	-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	local ValidationService = ServiceManager:GetService("ValidationService")
	if ValidationService then
		local stats = ValidationService:GetValidationStatistics()
		self.DebugService:SendMessage(
			player,
			string.format("–í–∞–ª–∏–¥–∞—Ü–∏–∏: %d (%.1f%% —É—Å–ø–µ—Ö)", stats.TotalValidations, stats.SuccessRate)
		)
		self.DebugService:SendMessage(player, string.format("–ö—ç—à: %.1f%% –ø–æ–ø–∞–¥–∞–Ω–∏–π", stats.CacheHitRate))
	end

	-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
	local RemoteService = ServiceManager:GetService("RemoteService")
	if RemoteService then
		local netStats = RemoteService:GetNetworkStats()
		self.DebugService:SendMessage(
			player,
			string.format(
				"–°–æ–±—ã—Ç–∏—è: %d, –§—É–Ω–∫—Ü–∏–∏: %d",
				netStats.TotalRemoteEvents,
				netStats.TotalRemoteFunctions
			)
		)
		self.DebugService:SendMessage(
			player,
			string.format("–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã: %d", netStats.ActiveRateLimits)
		)
	end

	-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")
	if PlayerDataService then
		local playerCount = 0
		for _ in pairs(PlayerDataService.Profiles) do
			playerCount = playerCount + 1
		end
		self.DebugService:SendMessage(player, string.format("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: %d", playerCount))
	end

	-- –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
	local memoryUsage = collectgarbage("count")
	self.DebugService:SendMessage(player, string.format("–ü–∞–º—è—Ç—å: %.1f MB", memoryUsage / 1024))

	-- FPS —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
	local startTime = tick()
	wait()
	local frameTime = tick() - startTime
	local estimatedFPS = 1 / frameTime
	self.DebugService:SendMessage(player, string.format("–ü—Ä–∏–º–µ—Ä–Ω—ã–π FPS: %.1f", estimatedFPS))
end

-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
function SystemCommands:ShowMemoryInfo(player)
	self.DebugService:SendMessage(player, "=== –ü–ê–ú–Ø–¢–¨ ===")

	local memoryKB = collectgarbage("count")
	local memoryMB = memoryKB / 1024

	self.DebugService:SendMessage(
		player,
		string.format("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %.2f MB (%.0f KB)", memoryMB, memoryKB)
	)

	-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ pcall
	local beforeGC = collectgarbage("count")
	local success = pcall(function()
		-- –í—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞
		local gcAction = "collect"
		local _ = collectgarbage(gcAction) -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä
	end)

	local afterGC = collectgarbage("count")
	local freedMemory = beforeGC - afterGC

	if success then
		self.DebugService:SendMessage(
			player,
			string.format("–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –º—É—Å–æ—Ä–∞: %.2f KB", freedMemory)
		)
	else
		self.DebugService:SendMessage(
			player,
			"–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ"
		)
	end

	-- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
	local ServiceManager = self.DebugService:GetServiceManager()
	local servicesCount = 0
	for _ in pairs(ServiceManager.Services) do
		servicesCount = servicesCount + 1
	end

	self.DebugService:SendMessage(player, "--- –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï ---")
	self.DebugService:SendMessage(player, string.format("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: %d", servicesCount))
	self.DebugService:SendMessage(player, string.format("–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: %d", #Players:GetPlayers()))

	-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞–º—è—Ç–∏
	if memoryMB > 100 then
		self.DebugService:SendMessage(player, "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
	elseif memoryMB > 50 then
		self.DebugService:SendMessage(player, "‚ö° –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
	else
		self.DebugService:SendMessage(player, "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
	end
end

-- –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
function SystemCommands:ShowServicesStatus(player)
	local ServiceManager = self.DebugService:GetServiceManager()

	self.DebugService:SendMessage(player, "=== –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í ===")

	local status = ServiceManager:GetStatus()
	local totalServices = 0
	local readyServices = 0

	for serviceName, serviceStatus in pairs(status) do
		totalServices = totalServices + 1

		local statusIcon = "‚ùå"
		if serviceStatus.Ready then
			statusIcon = "‚úÖ"
			readyServices = readyServices + 1
		elseif serviceStatus.Started then
			statusIcon = "üîÑ"
		elseif serviceStatus.Initialized then
			statusIcon = "‚ö†Ô∏è"
		end

		self.DebugService:SendMessage(player, string.format("%s %s", statusIcon, serviceName))
	end

	self.DebugService:SendMessage(
		player,
		string.format("–ì–æ—Ç–æ–≤–æ: %d/%d —Å–µ—Ä–≤–∏—Å–æ–≤", readyServices, totalServices)
	)

	if readyServices == totalServices then
		self.DebugService:SendMessage(player, "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
	elseif readyServices > totalServices * 0.8 then
		self.DebugService:SendMessage(player, "‚ö° –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≥–æ—Ç–æ–≤–æ")
	else
		self.DebugService:SendMessage(player, "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏")
	end
end

-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö
function SystemCommands:ShowPlayersInfo(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	self.DebugService:SendMessage(player, "=== –ò–ì–†–û–ö–ò –û–ù–õ–ê–ô–ù ===")

	local allPlayers = Players:GetPlayers()
	self.DebugService:SendMessage(player, string.format("–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: %d", #allPlayers))

	if PlayerDataService then
		local loadedCount = 0
		for _, playerInstance in ipairs(allPlayers) do
			if PlayerDataService:IsDataLoaded(playerInstance) then
				loadedCount = loadedCount + 1
			end
		end

		self.DebugService:SendMessage(
			player,
			string.format("–° –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: %d", loadedCount)
		)
	end

	-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
	self.DebugService:SendMessage(player, "--- –°–ü–ò–°–û–ö ---")
	for i, playerInstance in ipairs(allPlayers) do
		local dataStatus = "‚ùì"
		if PlayerDataService then
			if PlayerDataService:IsDataLoaded(playerInstance) then
				local data = PlayerDataService:GetData(playerInstance)
				if data then
					dataStatus = string.format("Lv.%d", data.Level)
				else
					dataStatus = "‚ùå"
				end
			else
				dataStatus = "‚è≥"
			end
		end

		self.DebugService:SendMessage(player, string.format("%d. %s (%s)", i, playerInstance.Name, dataStatus))
	end
end

-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
function SystemCommands:ForceGarbageCollection(player)
	local beforeGC = collectgarbage("count")

	self.DebugService:SendMessage(player, "üóëÔ∏è –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞...")
	self.DebugService:SendMessage(player, string.format("–î–æ: %.2f MB", beforeGC / 1024))

	-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ pcall –∏ —Å—Ç—Ä–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	local success = pcall(function()
		local gcAction = "collect"
		local _ = collectgarbage(gcAction) -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä
	end)

	local afterGC = collectgarbage("count")
	local freedMemory = beforeGC - afterGC

	if success then
		self.DebugService:SendMessage(player, string.format("–ü–æ—Å–ª–µ: %.2f MB", afterGC / 1024))
		self.DebugService:SendMessage(player, string.format("–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: %.2f KB", freedMemory))

		if freedMemory > 100 then
			self.DebugService:SendMessage(
				player,
				"‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ"
			)
		elseif freedMemory > 10 then
			self.DebugService:SendMessage(player, "‚ö° –ù–µ–º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ")
		else
			self.DebugService:SendMessage(player, "‚ÑπÔ∏è –ü–∞–º—è—Ç—å —É–∂–µ –±—ã–ª–∞ —á–∏—Å—Ç–æ–π")
		end
	else
		self.DebugService:SendMessage(
			player,
			"‚ùå –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ"
		)
		self.DebugService:SendMessage(player, string.format("–¢–µ–∫—É—â–∞—è –ø–∞–º—è—Ç—å: %.2f MB", afterGC / 1024))
	end
end

-- –ë–µ–Ω—á–º–∞—Ä–∫ —Å–∏—Å—Ç–µ–º—ã
function SystemCommands:RunBenchmark(player, benchmarkType)
	self.DebugService:SendMessage(player, string.format("üèÉ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞: %s", benchmarkType))

	if benchmarkType == "basic" then
		self:RunBasicBenchmark(player)
	elseif benchmarkType == "math" then
		self:RunMathBenchmark(player)
	elseif benchmarkType == "table" then
		self:RunTableBenchmark(player)
	elseif benchmarkType == "string" then
		self:RunStringBenchmark(player)
	else
		self.DebugService:SendMessage(player, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–µ–Ω—á–º–∞—Ä–∫–∞")
		self.DebugService:SendMessage(player, "–î–æ—Å—Ç—É–ø–Ω—ã–µ: basic, math, table, string")
	end
end

-- –ë–∞–∑–æ–≤—ã–π –±–µ–Ω—á–º–∞—Ä–∫
function SystemCommands:RunBasicBenchmark(player)
	local iterations = 100000

	-- –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
	local startTime = tick()
	local sum = 0
	for i = 1, iterations do
		sum = sum + i * 2
	end
	local mathTime = (tick() - startTime) * 1000

	-- –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
	startTime = tick()
	local tables = {}
	for i = 1, iterations / 10 do
		tables[i] = { value = i, squared = i * i }
	end
	local tableTime = (tick() - startTime) * 1000

	-- –¢–µ—Å—Ç 3: –°—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	startTime = tick()
	local str = ""
	for i = 1, iterations / 100 do
		str = str .. tostring(i)
	end
	local stringTime = (tick() - startTime) * 1000

	self.DebugService:SendMessage(player, "--- –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê ---")
	self.DebugService:SendMessage(player, string.format("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: %.2f –º—Å", mathTime))
	self.DebugService:SendMessage(player, string.format("–¢–∞–±–ª–∏—Ü—ã: %.2f –º—Å", tableTime))
	self.DebugService:SendMessage(player, string.format("–°—Ç—Ä–æ–∫–∏: %.2f –º—Å", stringTime))

	local totalTime = mathTime + tableTime + stringTime
	self.DebugService:SendMessage(player, string.format("–û–±—â–µ–µ –≤—Ä–µ–º—è: %.2f –º—Å", totalTime))

	-- –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	if totalTime < 100 then
		self.DebugService:SendMessage(player, "üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
	elseif totalTime < 500 then
		self.DebugService:SendMessage(player, "‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
	else
		self.DebugService:SendMessage(player, "‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
	end
end

-- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–Ω—á–º–∞—Ä–∫
function SystemCommands:RunMathBenchmark(player)
	local iterations = 50000

	local tests = {
		{
			name = "–°–ª–æ–∂–µ–Ω–∏–µ",
			func = function(i)
				return i + 1
			end,
		},
		{
			name = "–£–º–Ω–æ–∂–µ–Ω–∏–µ",
			func = function(i)
				return i * 2
			end,
		},
		{
			name = "–î–µ–ª–µ–Ω–∏–µ",
			func = function(i)
				return i / 2
			end,
		},
		{
			name = "–°—Ç–µ–ø–µ–Ω—å",
			func = function(i)
				return i ^ 0.5
			end,
		},
		{
			name = "–°–∏–Ω—É—Å",
			func = function(i)
				return math.sin(i)
			end,
		},
	}

	self.DebugService:SendMessage(player, "--- –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ë–ï–ù–ß–ú–ê–†–ö ---")

	for _, test in ipairs(tests) do
		local startTime = tick()
		local result = 0

		for i = 1, iterations do
			result = result + test.func(i)
		end

		local duration = (tick() - startTime) * 1000
		self.DebugService:SendMessage(player, string.format("%s: %.2f –º—Å", test.name, duration))
	end
end

-- –ë–µ–Ω—á–º–∞—Ä–∫ —Ç–∞–±–ª–∏—Ü
function SystemCommands:RunTableBenchmark(player)
	local iterations = 10000

	-- –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
	local startTime = tick()
	for i = 1, iterations do
		local _t = { a = i, b = i * 2, c = i * 3 }
	end
	local createTime = (tick() - startTime) * 1000

	-- –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
	local testTable = {}
	for i = 1, iterations do
		testTable[i] = i
	end

	startTime = tick()
	local sum = 0
	for i = 1, iterations do
		sum = sum + testTable[i]
	end
	local accessTime = (tick() - startTime) * 1000

	self.DebugService:SendMessage(player, "--- –ë–ï–ù–ß–ú–ê–†–ö –¢–ê–ë–õ–ò–¶ ---")
	self.DebugService:SendMessage(player, string.format("–°–æ–∑–¥–∞–Ω–∏–µ: %.2f –º—Å", createTime))
	self.DebugService:SendMessage(player, string.format("–î–æ—Å—Ç—É–ø: %.2f –º—Å", accessTime))
end

-- –°—Ç—Ä–æ–∫–æ–≤—ã–π –±–µ–Ω—á–º–∞—Ä–∫
function SystemCommands:RunStringBenchmark(player)
	local iterations = 1000

	-- –¢–µ—Å—Ç –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
	local startTime = tick()
	local str = ""
	for i = 1, iterations do
		str = str .. tostring(i)
	end
	local concatTime = (tick() - startTime) * 1000

	-- –¢–µ—Å—Ç table.concat
	startTime = tick()
	local parts = {}
	for i = 1, iterations do
		parts[i] = tostring(i)
	end
	local _result = table.concat(parts)
	local tableConcatTime = (tick() - startTime) * 1000

	self.DebugService:SendMessage(player, "--- –°–¢–†–û–ö–û–í–´–ô –ë–ï–ù–ß–ú–ê–†–ö ---")
	self.DebugService:SendMessage(player, string.format("–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è: %.2f –º—Å", concatTime))
	self.DebugService:SendMessage(player, string.format("table.concat: %.2f –º—Å", tableConcatTime))

	local improvement = concatTime / tableConcatTime
	self.DebugService:SendMessage(player, string.format("table.concat –±—ã—Å—Ç—Ä–µ–µ –≤ %.1fx —Ä–∞–∑", improvement))
end

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
function SystemCommands:ShowNetworkStats(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local RemoteService = ServiceManager:GetService("RemoteService")

	if not RemoteService then
		self.DebugService:SendMessage(player, "‚ùå RemoteService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local stats = RemoteService:GetNetworkStats()

	self.DebugService:SendMessage(player, "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ò ===")
	self.DebugService:SendMessage(player, string.format("RemoteEvent'–æ–≤: %d", stats.TotalRemoteEvents))
	self.DebugService:SendMessage(player, string.format("RemoteFunction'–æ–≤: %d", stats.TotalRemoteFunctions))
	self.DebugService:SendMessage(player, string.format("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤: %d", stats.ActiveRateLimits))

	-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö —Å –ª–∏–º–∏—Ç–∞–º–∏
	if stats.ActiveRateLimits > 0 then
		self.DebugService:SendMessage(player, "--- RATE LIMITS ---")
		local limitCount = 0
		for _, playerInstance in ipairs(Players:GetPlayers()) do
			if RemoteService.RateLimits[playerInstance] then
				local playerLimits = 0
				for _ in pairs(RemoteService.RateLimits[playerInstance]) do
					playerLimits = playerLimits + 1
				end
				if playerLimits > 0 then
					limitCount = limitCount + 1
					self.DebugService:SendMessage(
						player,
						string.format("%s: %d –ª–∏–º–∏—Ç–æ–≤", playerInstance.Name, playerLimits)
					)
				end
			end
		end

		if limitCount == 0 then
			self.DebugService:SendMessage(player, "–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		end
	end
end

-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
function SystemCommands:ShowUptimeInfo(player)
	-- –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã (—Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
	if not self.StartTime then
		self.StartTime = tick()
	end

	local uptime = tick() - self.StartTime
	local hours = math.floor(uptime / 3600)
	local minutes = math.floor((uptime % 3600) / 60)
	local seconds = math.floor(uptime % 60)

	self.DebugService:SendMessage(player, "=== –í–†–ï–ú–Ø –†–ê–ë–û–¢–´ ===")
	self.DebugService:SendMessage(player, string.format("Uptime: %d:%02d:%02d", hours, minutes, seconds))
	self.DebugService:SendMessage(player, string.format("–°–µ–∫—É–Ω–¥: %.0f", uptime))

	-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	local ServiceManager = self.DebugService:GetServiceManager()
	local servicesCount = 0
	for _ in pairs(ServiceManager.Services) do
		servicesCount = servicesCount + 1
	end

	self.DebugService:SendMessage(player, string.format("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: %d", servicesCount))
	self.DebugService:SendMessage(player, string.format("–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω: %d", #Players:GetPlayers()))

	-- –°—Ç–∞—Ç—É—Å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	if uptime > 3600 then -- –ë–æ–ª—å—à–µ —á–∞—Å–∞
		self.DebugService:SendMessage(player, "üéØ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
	elseif uptime > 600 then -- –ë–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
		self.DebugService:SendMessage(player, "‚ö° –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
	else
		self.DebugService:SendMessage(player, "üöÄ –ù–µ–¥–∞–≤–Ω–∏–π –∑–∞–ø—É—Å–∫")
	end
end

return SystemCommands
