-- src/server/services/debug/WorldCommands.lua
-- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º

local WorldCommands = {}
WorldCommands.__index = WorldCommands

function WorldCommands.new(debugService)
	local self = setmetatable({}, WorldCommands)
	self.DebugService = debugService
	return self
end

function WorldCommands:RegisterCommands()
	local debugService = self.DebugService

	debugService:RegisterCommand("time", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏—Ä–∞", function(player, _)
		self:ShowWorldTime(player)
	end)

	debugService:RegisterCommand(
		"settime",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è: /settime [—á–∞—Å—ã]",
		function(player, args)
			local hours = tonumber(args[1])
			if hours then
				self:SetWorldTime(player, hours)
			else
				debugService:SendMessage(player, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å (0-24): /settime 12")
			end
		end
	)

	debugService:RegisterCommand(
		"timespeed",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏: /timespeed [–º–Ω–æ–∂–∏—Ç–µ–ª—å]",
		function(player, args)
			local speed = tonumber(args[1])
			if speed then
				self:SetTimeSpeed(player, speed)
			else
				debugService:SendMessage(player, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å (0-100): /timespeed 2")
			end
		end
	)

	debugService:RegisterCommand("pausetime", "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–∞—É–∑—É", function(player, _)
		self:PauseTime(player)
	end)

	debugService:RegisterCommand("resumetime", "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", function(player, _)
		self:ResumeTime(player)
	end)

	debugService:RegisterCommand("day", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å (12:00)", function(player, _)
		self:SetWorldTime(player, 12)
	end)

	debugService:RegisterCommand("night", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ—á—å (00:00)", function(player, _)
		self:SetWorldTime(player, 0)
	end)

	debugService:RegisterCommand("dawn", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å–≤–µ—Ç (06:30)", function(player, _)
		self:SetWorldTime(player, 6.5)
	end)

	debugService:RegisterCommand("dusk", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞—Ç (19:30)", function(player, _)
		self:SetWorldTime(player, 19.5)
	end)

	debugService:RegisterCommand("worldinfo", "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ä–µ", function(player, _)
		self:ShowWorldInfo(player)
	end)

	debugService:RegisterCommand(
		"fasttime",
		"–ë—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è: /fasttime [—Å–∫–æ—Ä–æ—Å—Ç—å]",
		function(player, args)
			local speed = tonumber(args[1]) or 10
			self:SetTimeSpeed(player, speed)
			debugService:SendMessage(player, string.format("‚ö° –í—Ä–µ–º—è —É—Å–∫–æ—Ä–µ–Ω–æ –≤ %dx —Ä–∞–∑", speed))
		end
	)

	debugService:RegisterCommand(
		"normaltime",
		"–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏",
		function(player, _)
			self:SetTimeSpeed(player, 1)
			debugService:SendMessage(
				player,
				"üïê –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"
			)
		end
	)

	debugService:RegisterCommand("saveworld", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞", function(player, _)
		self:SaveWorldState(player)
	end)

	debugService:RegisterCommand("loadworld", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞", function(player, _)
		self:LoadWorldState(player)
	end)
end

-- –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏—Ä–∞
function WorldCommands:ShowWorldTime(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local timeInfo = WorldService:GetTimeInfo()
	local formattedTime = WorldService:GetFormattedTime()

	self.DebugService:SendMessage(player, "=== –í–†–ï–ú–Ø –ú–ò–†–ê ===")
	self.DebugService:SendMessage(player, string.format("üïê –í—Ä–µ–º—è: %s", formattedTime))
	self.DebugService:SendMessage(player, string.format("üåÖ –ü–µ—Ä–∏–æ–¥: %s", timeInfo.TimeOfDay))

	local dayNightStatus = timeInfo.IsDay and "–î–µ–Ω—å" or "–ù–æ—á—å"
	self.DebugService:SendMessage(player, string.format("‚òÄÔ∏è –î–µ–Ω—å/–ù–æ—á—å: %s", dayNightStatus))

	local speedStatus = timeInfo.IsPaused and "‚è∏Ô∏è –ü–ê–£–ó–ê" or string.format("‚ö° %.1fx", timeInfo.TimeSpeed)
	self.DebugService:SendMessage(player, string.format("‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å: %s", speedStatus))

	if timeInfo.TransitionFactor then
		self.DebugService:SendMessage(
			player,
			string.format("üåÑ –ü–µ—Ä–µ—Ö–æ–¥: %.1f%%", timeInfo.TransitionFactor * 100)
		)
	end
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –º–∏—Ä–∞
function WorldCommands:SetWorldTime(player, hours)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	if hours < 0 or hours > 24 then
		self.DebugService:SendMessage(player, "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 24 —á–∞—Å–æ–≤")
		return
	end

	WorldService:SetTime(hours)
	local newTimeInfo = WorldService:GetTimeInfo()
	local formattedTime = WorldService:GetFormattedTime()

	self.DebugService:SendMessage(
		player,
		string.format("‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s (%s)", formattedTime, newTimeInfo.TimeOfDay)
	)

	-- –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
	local RemoteService = ServiceManager:GetService("RemoteService")
	if RemoteService then
		RemoteService:BroadcastSystemMessage(
			string.format("üïê –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: %s", formattedTime),
			"INFO"
		)
	end
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
function WorldCommands:SetTimeSpeed(player, speed)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	if speed < 0 or speed > 100 then
		self.DebugService:SendMessage(player, "‚ùå –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
		return
	end

	WorldService:SetTimeSpeed(speed)

	if speed == 0 then
		self.DebugService:SendMessage(player, "‚è∏Ô∏è –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	elseif speed == 1 then
		self.DebugService:SendMessage(player, "üïê –í—Ä–µ–º—è –∏–¥–µ—Ç —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é")
	else
		self.DebugService:SendMessage(player, string.format("‚ö° –í—Ä–µ–º—è —É—Å–∫–æ—Ä–µ–Ω–æ –≤ %.1fx —Ä–∞–∑", speed))
	end
end

-- –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–∞—É–∑—É
function WorldCommands:PauseTime(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	WorldService:PauseTime()
	self.DebugService:SendMessage(player, "‚è∏Ô∏è –í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É")

	-- –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
	local RemoteService = ServiceManager:GetService("RemoteService")
	if RemoteService then
		RemoteService:BroadcastSystemMessage(
			"‚è∏Ô∏è –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
			"WARNING"
		)
	end
end

-- –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è
function WorldCommands:ResumeTime(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	WorldService:ResumeTime()
	self.DebugService:SendMessage(player, "‚ñ∂Ô∏è –í—Ä–µ–º—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")

	-- –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
	local RemoteService = ServiceManager:GetService("RemoteService")
	if RemoteService then
		RemoteService:BroadcastSystemMessage(
			"‚ñ∂Ô∏è –í—Ä–µ–º—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
			"INFO"
		)
	end
end

-- –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏—Ä–µ
function WorldCommands:ShowWorldInfo(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local timeInfo = WorldService:GetTimeInfo()
	local formattedTime = WorldService:GetFormattedTime()

	self.DebugService:SendMessage(player, "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ò–†–ï ===")

	-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	self.DebugService:SendMessage(player, "--- –í–†–ï–ú–Ø ---")
	self.DebugService:SendMessage(player, string.format("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: %s", formattedTime))
	self.DebugService:SendMessage(
		player,
		string.format("–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: %.2f —á–∞—Å–æ–≤", timeInfo.CurrentTime)
	)
	self.DebugService:SendMessage(player, string.format("–ü–µ—Ä–∏–æ–¥ —Å—É—Ç–æ–∫: %s", timeInfo.TimeOfDay))

	-- –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
	self.DebugService:SendMessage(player, "--- –°–û–°–¢–û–Ø–ù–ò–ï ---")
	local statusIcon = timeInfo.IsPaused and "‚è∏Ô∏è" or "‚ñ∂Ô∏è"
	local statusText = timeInfo.IsPaused and "–ü–∞—É–∑–∞" or "–ê–∫—Ç–∏–≤–Ω–æ"
	self.DebugService:SendMessage(player, string.format("%s –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s", statusIcon, statusText))
	self.DebugService:SendMessage(player, string.format("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: %.1fx", timeInfo.TimeSpeed))

	-- –î–µ–Ω—å/–ù–æ—á—å
	self.DebugService:SendMessage(player, "--- –î–ï–ù–¨/–ù–û–ß–¨ ---")
	local dayNightIcon = timeInfo.IsDay and "‚òÄÔ∏è" or "üåô"
	local dayNightText = timeInfo.IsDay and "–î–µ–Ω—å" or "–ù–æ—á—å"
	self.DebugService:SendMessage(player, string.format("%s –¢–∏–ø: %s", dayNightIcon, dayNightText))

	if timeInfo.TransitionFactor then
		local transitionText = ""
		if timeInfo.TimeOfDay == "Dawn" then
			transitionText = "üåÖ –†–∞—Å—Å–≤–µ—Ç"
		elseif timeInfo.TimeOfDay == "Dusk" then
			transitionText = "üåÜ –ó–∞–∫–∞—Ç"
		else
			transitionText = "üåÑ –ü–µ—Ä–µ—Ö–æ–¥"
		end
		self.DebugService:SendMessage(
			player,
			string.format("%s: %.1f%%", transitionText, timeInfo.TransitionFactor * 100)
		)
	end

	-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏—Ä–∞
	self.DebugService:SendMessage(player, "--- –ù–ê–°–¢–†–û–ô–ö–ò ---")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local Constants = require(ReplicatedStorage.Shared.constants.Constants)

	self.DebugService:SendMessage(
		player,
		string.format("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: %d —Å–µ–∫", Constants.WORLD.DAY_LENGTH)
	)
	self.DebugService:SendMessage(
		player,
		string.format("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ—á–∏: %d —Å–µ–∫", Constants.WORLD.NIGHT_LENGTH)
	)

	-- –û—Å–≤–µ—â–µ–Ω–∏–µ
	local Lighting = game:GetService("Lighting")
	self.DebugService:SendMessage(player, "--- –û–°–í–ï–©–ï–ù–ò–ï ---")
	self.DebugService:SendMessage(player, string.format("–Ø—Ä–∫–æ—Å—Ç—å: %.1f", Lighting.Brightness))
	self.DebugService:SendMessage(player, string.format("–í—Ä–µ–º—è Lighting: %.1f", Lighting.ClockTime))

	local atmosphere = Lighting:FindFirstChild("Atmosphere")
	if atmosphere then
		self.DebugService:SendMessage(
			player,
			string.format("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: %.1f", atmosphere.Density)
		)
	end

	-- –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
	self.DebugService:SendMessage(player, "--- –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ ---")
	self.DebugService:SendMessage(player, "/day - –¥–µ–Ω—å, /night - –Ω–æ—á—å")
	self.DebugService:SendMessage(player, "/dawn - —Ä–∞—Å—Å–≤–µ—Ç, /dusk - –∑–∞–∫–∞—Ç")
	self.DebugService:SendMessage(player, "/fasttime 10 - —É—Å–∫–æ—Ä–∏—Ç—å –≤—Ä–µ–º—è")
	self.DebugService:SendMessage(player, "/pausetime - –ø–∞—É–∑–∞ –≤—Ä–µ–º–µ–Ω–∏")
	self.DebugService:SendMessage(player, "/saveworld - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏—Ä")
end

-- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞
function WorldCommands:SaveWorldState(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	WorldService:SaveWorldState()
	self.DebugService:SendMessage(player, "üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
end

-- –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞
function WorldCommands:LoadWorldState(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local WorldService = ServiceManager:GetService("WorldService")

	if not WorldService then
		self.DebugService:SendMessage(player, "‚ùå WorldService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	WorldService:LoadWorldState()
	self.DebugService:SendMessage(player, "üìÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")

	-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	local timeInfo = WorldService:GetTimeInfo()
	local formattedTime = WorldService:GetFormattedTime()
	self.DebugService:SendMessage(
		player,
		string.format("üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: %s (%s)", formattedTime, timeInfo.TimeOfDay)
	)
end

return WorldCommands
