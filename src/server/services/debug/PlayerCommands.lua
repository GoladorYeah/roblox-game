-- src/server/services/debug/PlayerCommands.lua
-- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞ (–ù–ï –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º!)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Constants = require(ReplicatedStorage.Shared.constants.Constants)

local PlayerCommands = {}
PlayerCommands.__index = PlayerCommands

function PlayerCommands.new(debugService)
	local self = setmetatable({}, PlayerCommands)
	self.DebugService = debugService
	return self
end

function PlayerCommands:RegisterCommands()
	local debugService = self.DebugService

	-- –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –î–ê–ù–ù–´–• –∏–≥—Ä–æ–∫–∞, –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!
	debugService:RegisterCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞", function(player, _)
		self:ShowStats(player)
	end)

	debugService:RegisterCommand(
		"addgold",
		"–î–æ–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ: /addgold [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1]) or 100
			self:AddGold(player, amount)
		end
	)

	debugService:RegisterCommand(
		"setgold",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ: /setgold [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1]) or 1000
			self:SetGold(player, amount)
		end
	)

	debugService:RegisterCommand(
		"addattr",
		"–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: /addattr [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1]) or 5
			self:AddAttributePoints(player, amount)
		end
	)

	debugService:RegisterCommand("resetattr", "–°–±—Ä–æ—Å–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã", function(player, _)
		self:ResetAttributes(player)
	end)

	debugService:RegisterCommand(
		"savedata",
		"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
		function(player, _)
			self:SavePlayerData(player)
		end
	)

	debugService:RegisterCommand(
		"reloaddata",
		"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞",
		function(player, _)
			self:ReloadPlayerData(player)
		end
	)
end

-- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
function PlayerCommands:ShowStats(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil or PlayerDataService:IsDataLoaded(player) == false then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if data ~= nil then
		local requiredXP = PlayerDataService:GetRequiredExperience(data.Level)
		local totalXP = PlayerDataService:GetTotalExperience(player)
		local nextLevelXP = PlayerDataService:GetRequiredExperience(data.Level + 1)

		self.DebugService:SendMessage(player, "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–û–ö–ê ===")
		self.DebugService:SendMessage(player, "üë§ –ò–º—è: " .. player.Name)
		self.DebugService:SendMessage(player, "‚≠ê –£—Ä–æ–≤–µ–Ω—å: " .. data.Level)
		self.DebugService:SendMessage(
			player,
			string.format(
				"üìà –û–ø—ã—Ç: %d/%d (%.1f%%)",
				data.Experience,
				requiredXP,
				(data.Experience / requiredXP) * 100
			)
		)
		self.DebugService:SendMessage(player, "üéØ –û–±—â–∏–π –æ–ø—ã—Ç: " .. totalXP)
		self.DebugService:SendMessage(player, "üìä –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: " .. nextLevelXP)
		self.DebugService:SendMessage(player, "üí∞ –ó–æ–ª–æ—Ç–æ: " .. data.Currency.Gold)
		self.DebugService:SendMessage(player, "üé≤ –û—á–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: " .. data.AttributePoints)
		self.DebugService:SendMessage(
			player,
			"‚è±Ô∏è –í—Ä–µ–º—è –∏–≥—Ä—ã: " .. math.floor(data.Statistics.TotalPlayTime / 60) .. " –º–∏–Ω"
		)

		-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (—Ä–∞—Å—á–µ—Ç–Ω—ã–µ)
		self.DebugService:SendMessage(player, "--- –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –†–ï–°–£–†–°–´ ---")
		self.DebugService:SendMessage(
			player,
			string.format("‚ù§Ô∏è –ú–∞–∫—Å. –∑–¥–æ—Ä–æ–≤—å–µ: %d", data.MaxHealth or 100)
		)
		self.DebugService:SendMessage(player, string.format("üíô –ú–∞–∫—Å. –º–∞–Ω–∞: %d", data.MaxMana or 50))
		self.DebugService:SendMessage(
			player,
			string.format("üíõ –ú–∞–∫—Å. —Å—Ç–∞–º–∏–Ω–∞: %d", data.MaxStamina or 100)
		)

		-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
		self.DebugService:SendMessage(player, "--- –ê–¢–†–ò–ë–£–¢–´ ---")
		for attrName, attrValue in pairs(data.Attributes) do
			self.DebugService:SendMessage(player, string.format("üî∏ %s: %d", attrName, attrValue))
		end

		-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		self.DebugService:SendMessage(player, "--- –ò–ì–†–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---")
		self.DebugService:SendMessage(player, "‚öîÔ∏è –£–±–∏—Ç–æ –º–æ–±–æ–≤: " .. data.Statistics.MobsKilled)
		self.DebugService:SendMessage(
			player,
			"üìú –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–≤–µ—Å—Ç–æ–≤: " .. data.Statistics.QuestsCompleted
		)
		self.DebugService:SendMessage(
			player,
			"üî® –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. data.Statistics.ItemsCrafted
		)
		self.DebugService:SendMessage(player, "üíÄ –°–º–µ—Ä—Ç–µ–π: " .. data.Statistics.Deaths)
		self.DebugService:SendMessage(player, "‚öîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: " .. data.Statistics.DamageDealt)
		self.DebugService:SendMessage(player, "üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: " .. data.Statistics.DamageTaken)
	end
end

-- –î–æ–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ
function PlayerCommands:AddGold(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil or PlayerDataService:IsDataLoaded(player) == false then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	local success = PlayerDataService:AddGold(player, amount, "ADMIN_GRANT")
	if success then
		self.DebugService:SendMessage(player, string.format("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –∑–æ–ª–æ—Ç–∞!", amount))
	else
		self.DebugService:SendMessage(player, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–æ–ª–æ—Ç–∞!")
	end
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ
function PlayerCommands:SetGold(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil or PlayerDataService:IsDataLoaded(player) == false then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if data ~= nil then
		amount = math.max(0, math.min(amount, 1000000000)) -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω

		local oldGold = data.Currency.Gold
		data.Currency.Gold = amount

		-- –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
		PlayerDataService:FireClient(player, Constants.REMOTE_EVENTS.PLAYER_DATA_LOADED, data)

		self.DebugService:SendMessage(
			player,
			string.format("‚úÖ –ó–æ–ª–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %d -> %d", oldGold, amount)
		)
		print(string.format("[DEBUG] %s gold set: %d -> %d", player.Name, oldGold, amount))
	end
end

-- –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
function PlayerCommands:AddAttributePoints(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil or PlayerDataService:IsDataLoaded(player) == false then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if data ~= nil then
		amount = math.max(0, amount)

		local oldPoints = data.AttributePoints
		data.AttributePoints = data.AttributePoints + amount

		-- –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
		PlayerDataService:FireClient(player, Constants.REMOTE_EVENTS.PLAYER_DATA_LOADED, data)

		self.DebugService:SendMessage(
			player,
			string.format(
				"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ %d –æ—á–∫–æ–≤ –∞—Ç—Ä–∏–±—É—Ç–æ–≤! –í—Å–µ–≥–æ: %d",
				amount,
				data.AttributePoints
			)
		)
		print(
			string.format(
				"[DEBUG] %s attribute points: %d -> %d (+%d)",
				player.Name,
				oldPoints,
				data.AttributePoints,
				amount
			)
		)
	end
end

-- –°–±—Ä–æ—Å–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
function PlayerCommands:ResetAttributes(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil or PlayerDataService:IsDataLoaded(player) == false then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if data ~= nil then
		-- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		local oldAttributes = table.clone(data.Attributes)

		-- –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
		data.Attributes = {
			Strength = Constants.PLAYER.BASE_ATTRIBUTES.Strength,
			Dexterity = Constants.PLAYER.BASE_ATTRIBUTES.Dexterity,
			Intelligence = Constants.PLAYER.BASE_ATTRIBUTES.Intelligence,
			Constitution = Constants.PLAYER.BASE_ATTRIBUTES.Constitution,
			Focus = Constants.PLAYER.BASE_ATTRIBUTES.Focus,
		}

		-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 5 –æ—á–∫–æ–≤ –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
		data.AttributePoints = math.max(0, (data.Level - 1) * 5)

		-- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å –Ω–æ–≤—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
		PlayerDataService:InitializePlayerResources(player)

		-- –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç
		PlayerDataService:FireClient(player, Constants.REMOTE_EVENTS.PLAYER_DATA_LOADED, data)

		self.DebugService:SendMessage(
			player,
			"‚úÖ –ê—Ç—Ä–∏–±—É—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!"
		)
		self.DebugService:SendMessage(
			player,
			string.format("üé≤ –û—á–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: %d", data.AttributePoints)
		)

		-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
		self.DebugService:SendMessage(player, "--- –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---")
		for attr, newValue in pairs(data.Attributes) do
			local oldValue = oldAttributes[attr]
			if oldValue ~= newValue then
				self.DebugService:SendMessage(player, string.format("%s: %d -> %d", attr, oldValue, newValue))
			end
		end

		print(
			string.format(
				"[DEBUG] %s attributes reset to base values, points restored: %d",
				player.Name,
				data.AttributePoints
			)
		)
	end
end

-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
function PlayerCommands:SavePlayerData(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil then
		self.DebugService:SendMessage(player, "‚ùå PlayerDataService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	if not PlayerDataService:IsDataLoaded(player) then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	-- ProfileService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
	-- –ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ SaveAllPlayerData
	PlayerDataService:SaveAllPlayerData()

	self.DebugService:SendMessage(player, "üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
	print(string.format("[DEBUG] Forced save for %s", player.Name))
end

-- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ (–æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!)
function PlayerCommands:ReloadPlayerData(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if PlayerDataService == nil then
		self.DebugService:SendMessage(player, "‚ùå PlayerDataService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	self.DebugService:SendMessage(player, "‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
	self.DebugService:SendMessage(
		player,
		"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!"
	)

	-- –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
	PlayerDataService:SavePlayerData(player)

	-- –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
	wait(1)

	-- –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
	PlayerDataService:LoadPlayerData(player)

	self.DebugService:SendMessage(player, "üîÑ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
	print(string.format("[DEBUG] Data reloaded for %s", player.Name))
end

return PlayerCommands
