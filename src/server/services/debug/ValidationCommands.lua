-- src/server/services/debug/ValidationCommands.lua
-- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

local ValidationCommands = {}
ValidationCommands.__index = ValidationCommands

function ValidationCommands.new(debugService)
	local self = setmetatable({}, ValidationCommands)
	self.DebugService = debugService
	return self
end

function ValidationCommands:RegisterCommands()
	local debugService = self.DebugService

	debugService:RegisterCommand("valstats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", function(player, _)
		self:ShowValidationStats(player)
	end)

	debugService:RegisterCommand("testval", "–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: /testval [—Ç–∏–ø]", function(player, args)
		local testType = args[1] or "player"
		self:TestValidation(player, testType)
	end)

	debugService:RegisterCommand("resetval", "–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", function(player, _)
		self:ResetValidationStats(player)
	end)

	debugService:RegisterCommand("valtest", "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏", function(player, _)
		self:QuickValidationTest(player)
	end)

	debugService:RegisterCommand(
		"valdebug",
		"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: /valdebug [on/off]",
		function(player, args)
			local mode = args[1] or "toggle"
			self:SetValidationDebugMode(player, mode)
		end
	)
end

-- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function ValidationCommands:ShowValidationStats(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local ValidationService = ServiceManager:GetService("ValidationService")

	if not ValidationService then
		self.DebugService:SendMessage(player, "‚ùå ValidationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local stats = ValidationService:GetValidationStatistics()

	self.DebugService:SendMessage(player, "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò ===")
	self.DebugService:SendMessage(player, string.format("–û–±—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: %d", stats.TotalValidations))
	self.DebugService:SendMessage(player, string.format("–£—Å–ø–µ—à–Ω—ã—Ö: %d", stats.PassedValidations))
	self.DebugService:SendMessage(player, string.format("–ù–µ—É–¥–∞—á–Ω—ã—Ö: %d", stats.FailedValidations))
	self.DebugService:SendMessage(player, string.format("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %.2f%%", stats.SuccessRate))
	self.DebugService:SendMessage(
		player,
		string.format("–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: %d (%.2f%%)", stats.CacheHits, stats.CacheHitRate)
	)
	self.DebugService:SendMessage(player, string.format("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %.2f —á–∞—Å–æ–≤", stats.UptimeHours))

	-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
	if next(stats.MostCommonErrors) then
		self.DebugService:SendMessage(player, "--- –ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò ---")

		-- –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
		local sortedErrors = {}
		for errorCode, count in pairs(stats.MostCommonErrors) do
			table.insert(sortedErrors, { code = errorCode, count = count })
		end

		table.sort(sortedErrors, function(a, b)
			return a.count > b.count
		end)

		-- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –æ—à–∏–±–æ–∫
		for i = 1, math.min(5, #sortedErrors) do
			local error = sortedErrors[i]
			self.DebugService:SendMessage(player, string.format("  %s: %d —Ä–∞–∑", error.code, error.count))
		end
	else
		self.DebugService:SendMessage(player, "‚úÖ –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
	end
end

-- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function ValidationCommands:TestValidation(player, testType)
	local ServiceManager = self.DebugService:GetServiceManager()
	local ValidationService = ServiceManager:GetService("ValidationService")
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if not ValidationService then
		self.DebugService:SendMessage(player, "‚ùå ValidationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	self.DebugService:SendMessage(
		player,
		string.format("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", testType)
	)

	if testType == "player" then
		-- –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
		local data = PlayerDataService:GetData(player)
		if data then
			local result = ValidationService:ValidatePlayerData(data, player.UserId)
			if result.IsValid then
				self.DebugService:SendMessage(player, "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
			else
				self.DebugService:SendMessage(
					player,
					string.format("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", result.ErrorMessage or "Unknown")
				)
				self.DebugService:SendMessage(
					player,
					string.format("–ö–æ–¥ –æ—à–∏–±–∫–∏: %s", result.ErrorCode or "UNKNOWN")
				)
			end
		else
			self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
		end
	elseif testType == "exp" then
		-- –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞
		local result = ValidationService:ValidateExperienceChange(100, 50, player.UserId)
		if result.IsValid then
			self.DebugService:SendMessage(player, "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—ã—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
		else
			self.DebugService:SendMessage(
				player,
				string.format("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞: %s", result.ErrorMessage or "Unknown")
			)
		end

		-- –¢–µ—Å—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ–ø—ã—Ç–∞
		local badResult = ValidationService:ValidateExperienceChange(100, 100000, player.UserId)
		if not badResult.IsValid then
			self.DebugService:SendMessage(player, "‚úÖ –ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
		else
			self.DebugService:SendMessage(player, "‚ùå –ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
		end
	elseif testType == "gold" then
		-- –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–æ–ª–æ—Ç–∞
		local result = ValidationService:ValidateGoldTransaction(1000, -500, "ITEM_PURCHASE", player.UserId)
		if result.IsValid then
			self.DebugService:SendMessage(player, "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–æ–ª–æ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
		else
			self.DebugService:SendMessage(
				player,
				string.format("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–æ–ª–æ—Ç–∞: %s", result.ErrorMessage or "Unknown")
			)
		end

		-- –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∑–æ–ª–æ—Ç–∞
		local poorResult = ValidationService:ValidateGoldTransaction(100, -500, "ITEM_PURCHASE", player.UserId)
		if not poorResult.IsValid then
			self.DebugService:SendMessage(
				player,
				"‚úÖ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∑–æ–ª–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
			)
		else
			self.DebugService:SendMessage(player, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∑–æ–ª–æ—Ç–∞ –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
		end
	elseif testType == "level" then
		-- –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
		local tests = {
			{ current = 5, new = 6, shouldPass = true, desc = "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ" },
			{ current = 10, new = 12, shouldPass = false, desc = "–ü—Ä—ã–∂–æ–∫ —á–µ—Ä–µ–∑ —É—Ä–æ–≤–µ–Ω—å" },
			{ current = 15, new = 14, shouldPass = false, desc = "–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è" },
			{ current = 50, new = 51, shouldPass = true, desc = "–í—ã—Å–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏" },
		}

		self.DebugService:SendMessage(player, "--- –¢–ï–°–¢–´ –£–†–û–í–ù–ï–ô ---")
		local passedTests = 0

		for _, test in ipairs(tests) do
			local result = ValidationService:ValidateLevelChange(test.current, test.new, player.UserId)
			local passed = (result.IsValid == test.shouldPass)

			if passed then
				passedTests = passedTests + 1
				self.DebugService:SendMessage(player, string.format("‚úÖ %s", test.desc))
			else
				self.DebugService:SendMessage(player, string.format("‚ùå %s", test.desc))
			end
		end

		self.DebugService:SendMessage(
			player,
			string.format("–†–µ–∑—É–ª—å—Ç–∞—Ç: %d/%d —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ", passedTests, #tests)
		)
	elseif testType == "stress" then
		-- –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
		self.DebugService:SendMessage(player, "üî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ (1000 –≤–∞–ª–∏–¥–∞—Ü–∏–π)...")

		local startTime = tick()
		local passedTests = 0
		local testCount = 1000

		for _ = 1, testCount do
			local testData = self:GenerateRandomPlayerData()
			local result = ValidationService:ValidatePlayerData(testData, player.UserId)
			if result.IsValid then
				passedTests = passedTests + 1
			end
		end

		local endTime = tick()
		local duration = (endTime - startTime) * 1000

		self.DebugService:SendMessage(
			player,
			string.format("‚ö° –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ %.2f –º—Å", duration)
		)
		self.DebugService:SendMessage(
			player,
			string.format(
				"–ü—Ä–æ—à–ª–æ: %d/%d —Ç–µ—Å—Ç–æ–≤ (%.1f%%)",
				passedTests,
				testCount,
				(passedTests / testCount) * 100
			)
		)
		self.DebugService:SendMessage(
			player,
			string.format("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: %.3f –º—Å/—Ç–µ—Å—Ç", duration / testCount)
		)

		-- –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
		if duration < 1000 then
			self.DebugService:SendMessage(player, "üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
		elseif duration < 3000 then
			self.DebugService:SendMessage(player, "‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
		else
			self.DebugService:SendMessage(player, "‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
		end
	elseif testType == "all" then
		-- –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
		self.DebugService:SendMessage(player, "üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤...")

		self:TestValidation(player, "player")
		self:TestValidation(player, "exp")
		self:TestValidation(player, "gold")
		self:TestValidation(player, "level")

		self.DebugService:SendMessage(player, "‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
	else
		self.DebugService:SendMessage(player, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞!")
		self.DebugService:SendMessage(player, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: player, exp, gold, level, stress, all")
	end
end

-- –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
function ValidationCommands:QuickValidationTest(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local ValidationService = ServiceManager:GetService("ValidationService")
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if not ValidationService or not PlayerDataService then
		self.DebugService:SendMessage(player, "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if not data then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	self.DebugService:SendMessage(player, "‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")

	-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	local tests = {
		{
			name = "–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞",
			test = function()
				return ValidationService:ValidatePlayerData(data, player.UserId)
			end,
		},
		{
			name = "–û–ø—ã—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è",
			test = function()
				return ValidationService:ValidateExperienceForLevel(data.Level, data.Experience)
			end,
		},
		{
			name = "–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
			test = function()
				return ValidationService:ValidateDataIntegrity(data)
			end,
		},
	}

	local passedTests = 0
	for _, test in ipairs(tests) do
		local result = test.test()
		if result.IsValid then
			self.DebugService:SendMessage(player, string.format("‚úÖ %s", test.name))
			passedTests = passedTests + 1
		else
			self.DebugService:SendMessage(
				player,
				string.format("‚ùå %s: %s", test.name, result.ErrorMessage or "Unknown")
			)
		end
	end

	if passedTests == #tests then
		self.DebugService:SendMessage(player, "üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
	else
		self.DebugService:SendMessage(
			player,
			string.format("‚ö†Ô∏è –ü—Ä–æ–π–¥–µ–Ω–æ %d/%d –ø—Ä–æ–≤–µ—Ä–æ–∫", passedTests, #tests)
		)
	end
end

-- –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function ValidationCommands:ResetValidationStats(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local ValidationService = ServiceManager:GetService("ValidationService")

	if not ValidationService then
		self.DebugService:SendMessage(player, "‚ùå ValidationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	ValidationService:ResetStatistics()
	self.DebugService:SendMessage(player, "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–∞!")
end

-- –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function ValidationCommands:SetValidationDebugMode(player, mode)
	local ServiceManager = self.DebugService:GetServiceManager()
	local ValidationService = ServiceManager:GetService("ValidationService")

	if not ValidationService then
		self.DebugService:SendMessage(player, "‚ùå ValidationService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local currentSettings = ValidationService:GetSettings()
	local newMode = nil

	if mode == "on" then
		newMode = true
	elseif mode == "off" then
		newMode = false
	else -- toggle
		newMode = not currentSettings.LogFailedValidations
	end

	ValidationService:SetDevelopmentMode(newMode)

	local statusText = newMode and "–í–ö–õ–Æ–ß–ï–ù" or "–í–´–ö–õ–Æ–ß–ï–ù"
	self.DebugService:SendMessage(
		player,
		string.format("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", statusText)
	)

	if newMode then
		self.DebugService:SendMessage(
			player,
			"–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è"
		)
	else
		self.DebugService:SendMessage(player, "–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
	end
end

-- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function ValidationCommands:GenerateRandomPlayerData()
	return {
		Level = math.random(1, 100),
		Experience = math.random(0, 10000),
		Attributes = {
			Strength = math.random(10, 100),
			Dexterity = math.random(10, 100),
			Intelligence = math.random(10, 100),
			Constitution = math.random(10, 100),
			Focus = math.random(10, 100),
		},
		Currency = { Gold = math.random(0, 100000) },
		Statistics = {
			TotalPlayTime = math.random(0, 86400),
			MobsKilled = math.random(0, 1000),
			QuestsCompleted = math.random(0, 100),
			ItemsCrafted = math.random(0, 500),
			Deaths = math.random(0, 50),
			DamageDealt = math.random(0, 50000),
			DamageTaken = math.random(0, 30000),
			DistanceTraveled = math.random(0, 100000),
		},
		Equipment = {
			MainHand = nil,
			OffHand = nil,
			Helmet = nil,
			Chest = nil,
			Legs = nil,
			Boots = nil,
			Ring1 = nil,
			Ring2 = nil,
			Amulet = nil,
		},
		Inventory = {},
		WeaponMastery = {
			Sword = { Level = math.random(1, 20), Experience = math.random(0, 1000) },
			Axe = { Level = math.random(1, 20), Experience = math.random(0, 1000) },
			Bow = { Level = math.random(1, 20), Experience = math.random(0, 1000) },
			Staff = { Level = math.random(1, 20), Experience = math.random(0, 1000) },
			Spear = { Level = math.random(1, 20), Experience = math.random(0, 1000) },
		},
		Settings = {
			MusicVolume = math.random() * 1.0,
			SFXVolume = math.random() * 1.0,
			ShowDamageNumbers = math.random() > 0.5,
			AutoPickupItems = math.random() > 0.5,
			ChatFilter = math.random() > 0.5,
			ShowPlayerNames = math.random() > 0.5,
		},
		AttributePoints = math.random(0, 50),
		Health = math.random(50, 200),
		Mana = math.random(20, 100),
		Stamina = math.random(50, 150),
		MaxHealth = math.random(100, 300),
		MaxMana = math.random(50, 150),
		MaxStamina = math.random(100, 200),
		LastLogin = os.time(),
	}
end

return ValidationCommands
