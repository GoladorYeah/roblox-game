-- src/server/services/debug/CharacterCommands.lua
-- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Constants = require(ReplicatedStorage.Shared.constants.Constants)

local CharacterCommands = {}
CharacterCommands.__index = CharacterCommands

function CharacterCommands.new(debugService)
	local self = setmetatable({}, CharacterCommands)
	self.DebugService = debugService
	return self
end

function CharacterCommands:RegisterCommands()
	local debugService = self.DebugService

	debugService:RegisterCommand(
		"damage",
		"–ù–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω: /damage [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1]) or 25
			self:DamagePlayer(player, amount)
		end
	)

	debugService:RegisterCommand(
		"heal",
		"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ: /heal [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1]) or 50
			self:HealPlayer(player, amount)
		end
	)

	debugService:RegisterCommand("kill", "–£–±–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", function(player, _)
		self:KillPlayer(player)
	end)

	debugService:RegisterCommand("respawn", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–ø–∞–≤–Ω", function(player, _)
		self:RespawnPlayer(player)
	end)

	debugService:RegisterCommand("invul", "–ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å: /invul [—Å–µ–∫—É–Ω–¥—ã]", function(player, args)
		local duration = tonumber(args[1]) or 10
		self:SetInvulnerability(player, duration)
	end)

	debugService:RegisterCommand(
		"regen",
		"–ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
		function(player, _)
			self:FullRegeneration(player)
		end
	)

	debugService:RegisterCommand(
		"sethealth",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ: /sethealth [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1])
			if amount then
				self:SetHealth(player, amount)
			else
				debugService:SendMessage(
					player,
					"‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è: /sethealth 100"
				)
			end
		end
	)

	debugService:RegisterCommand(
		"setmana",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–Ω—É: /setmana [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1])
			if amount then
				self:SetMana(player, amount)
			else
				debugService:SendMessage(player, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–Ω—ã: /setmana 50")
			end
		end
	)

	debugService:RegisterCommand(
		"setstamina",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–º–∏–Ω—É: /setstamina [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1])
			if amount then
				self:SetStamina(player, amount)
			else
				debugService:SendMessage(
					player,
					"‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–º–∏–Ω—ã: /setstamina 100"
				)
			end
		end
	)

	debugService:RegisterCommand("charinfo", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ", function(player, _)
		self:ShowCharacterInfo(player)
	end)

	debugService:RegisterCommand(
		"speed",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å: /speed [–∑–Ω–∞—á–µ–Ω–∏–µ]",
		function(player, args)
			local speed = tonumber(args[1]) or 16
			self:SetWalkSpeed(player, speed)
		end
	)

	debugService:RegisterCommand(
		"jump",
		"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—É –ø—Ä—ã–∂–∫–∞: /jump [–∑–Ω–∞—á–µ–Ω–∏–µ]",
		function(player, args)
			local jumpPower = tonumber(args[1]) or 50
			self:SetJumpPower(player, jumpPower)
		end
	)

	debugService:RegisterCommand(
		"consumestamina",
		"–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞–º–∏–Ω—É: /consumestamina [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
		function(player, args)
			local amount = tonumber(args[1]) or 20
			self:ConsumeStamina(player, amount)
		end
	)

	debugService:RegisterCommand(
		"teleport",
		"–¢–µ–ª–µ–ø–æ—Ä—Ç –∫ —Å–ø–∞–≤–Ω—É: /teleport [spawn]",
		function(player, args)
			local spawnName = args[1] or "MAIN"
			self:TeleportToSpawn(player, spawnName)
		end
	)

	debugService:RegisterCommand("resetchar", "–°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", function(player, _)
		self:ResetCharacter(player)
	end)
end

-- –ù–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
function CharacterCommands:DamagePlayer(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	amount = math.max(1, math.min(amount, 10000)) -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω

	local success = CharacterService:DamagePlayer(player, amount, "Debug", "Admin Command")
	if success then
		self.DebugService:SendMessage(player, string.format("üí• –ù–∞–Ω–µ—Å–µ–Ω —É—Ä–æ–Ω: %d", amount))
	else
		self.DebugService:SendMessage(player, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω!")
	end
end

-- –õ–µ—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function CharacterCommands:HealPlayer(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	amount = math.max(1, math.min(amount, 10000))

	local success = CharacterService:HealPlayer(player, amount, "Debug Heal")
	if success then
		self.DebugService:SendMessage(
			player,
			string.format("üíö –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–¥–æ—Ä–æ–≤—å—è: %d", amount)
		)
	else
		self.DebugService:SendMessage(player, "‚ùå –ó–¥–æ—Ä–æ–≤—å–µ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ!")
	end
end

-- –£–±–∏—Ç—å –∏–≥—Ä–æ–∫–∞
function CharacterCommands:KillPlayer(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local character = CharacterService:GetPlayerCharacter(player)
	if not character then
		self.DebugService:SendMessage(player, "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	local humanoid = character:FindFirstChild("Humanoid")
	if humanoid and humanoid.Health > 0 then
		CharacterService:DamagePlayer(player, humanoid.Health, "Debug", "Kill Command")
		self.DebugService:SendMessage(player, "üíÄ –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–±–∏—Ç!")
	else
		self.DebugService:SendMessage(player, "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –º–µ—Ä—Ç–≤!")
	end
end

-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–ø–∞–≤–Ω
function CharacterCommands:RespawnPlayer(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	-- –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–µ—Å–ø–∞–≤–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
	CharacterService.RespawnTimers[player] = nil

	-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ—Å–ø–∞–≤–Ω–∏–º
	CharacterService:RespawnPlayer(player)
	self.DebugService:SendMessage(player, "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å–ø–∞–≤–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!")
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
function CharacterCommands:SetInvulnerability(player, duration)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	duration = math.max(1, math.min(duration, 300)) -- –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç

	CharacterService:SetPlayerInvulnerable(player, duration)
	self.DebugService:SendMessage(
		player,
		string.format("üõ°Ô∏è –ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ %.1f —Å–µ–∫—É–Ω–¥", duration)
	)
end

-- –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
function CharacterCommands:FullRegeneration(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	CharacterService:RestorePlayerResources(player)
	self.DebugService:SendMessage(player, "‚ú® –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
function CharacterCommands:SetHealth(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if not CharacterService or not PlayerDataService then
		self.DebugService:SendMessage(player, "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if not data then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	amount = math.max(0, math.min(amount, data.MaxHealth))

	-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞–ø—Ä—è–º—É—é
	data.Health = amount

	local character = CharacterService:GetPlayerCharacter(player)
	if character then
		local humanoid = character:FindFirstChild("Humanoid")
		if humanoid then
			humanoid.Health = amount
		end
	end

	CharacterService:NotifyResourceChanged(player, "Health", amount, data.MaxHealth)
	self.DebugService:SendMessage(
		player,
		string.format("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %d/%d", amount, data.MaxHealth)
	)
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–Ω—É
function CharacterCommands:SetMana(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not PlayerDataService or not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if not data then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	amount = math.max(0, math.min(amount, data.MaxMana))
	data.Mana = amount

	CharacterService:NotifyResourceChanged(player, "Mana", amount, data.MaxMana)
	self.DebugService:SendMessage(
		player,
		string.format("üíô –ú–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d/%d", amount, data.MaxMana)
	)
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–º–∏–Ω—É
function CharacterCommands:SetStamina(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not PlayerDataService or not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	if not data then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	amount = math.max(0, math.min(amount, data.MaxStamina))
	data.Stamina = amount

	CharacterService:NotifyResourceChanged(player, "Stamina", amount, data.MaxStamina)
	self.DebugService:SendMessage(
		player,
		string.format("üíõ –°—Ç–∞–º–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d/%d", amount, data.MaxStamina)
	)
end

-- –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
function CharacterCommands:ShowCharacterInfo(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")
	local PlayerDataService = ServiceManager:GetService("PlayerDataService")

	if not CharacterService or not PlayerDataService then
		self.DebugService:SendMessage(player, "‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
		return
	end

	local data = PlayerDataService:GetData(player)
	local character = CharacterService:GetPlayerCharacter(player)

	if not data then
		self.DebugService:SendMessage(player, "‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
		return
	end

	self.DebugService:SendMessage(player, "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ï–†–°–û–ù–ê–ñ–ï ===")

	-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	self.DebugService:SendMessage(player, string.format("–ò–º—è: %s", player.Name))
	self.DebugService:SendMessage(player, string.format("–£—Ä–æ–≤–µ–Ω—å: %d", data.Level))

	-- –†–µ—Å—É—Ä—Å—ã
	self.DebugService:SendMessage(player, "--- –†–ï–°–£–†–°–´ ---")
	self.DebugService:SendMessage(
		player,
		string.format(
			"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: %d/%d (%.1f%%)",
			data.Health,
			data.MaxHealth,
			(data.Health / data.MaxHealth) * 100
		)
	)
	self.DebugService:SendMessage(
		player,
		string.format("üíô –ú–∞–Ω–∞: %d/%d (%.1f%%)", data.Mana, data.MaxMana, (data.Mana / data.MaxMana) * 100)
	)
	self.DebugService:SendMessage(
		player,
		string.format(
			"üíõ –°—Ç–∞–º–∏–Ω–∞: %d/%d (%.1f%%)",
			data.Stamina,
			data.MaxStamina,
			(data.Stamina / data.MaxStamina) * 100
		)
	)

	-- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	self.DebugService:SendMessage(player, "--- –°–û–°–¢–û–Ø–ù–ò–ï ---")

	local isAlive = character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0
	local aliveStatus = isAlive and "‚úÖ –ñ–∏–≤" or "üíÄ –ú–µ—Ä—Ç–≤"
	self.DebugService:SendMessage(player, string.format("–°—Ç–∞—Ç—É—Å: %s", aliveStatus))

	local isInvulnerable = CharacterService:IsPlayerInvulnerable(player)
	local invulStatus = isInvulnerable and "üõ°Ô∏è –ù–µ—É—è–∑–≤–∏–º" or "‚öîÔ∏è –£—è–∑–≤–∏–º"
	self.DebugService:SendMessage(player, string.format("–ó–∞—â–∏—Ç–∞: %s", invulStatus))

	local isSetup = CharacterService:IsCharacterSetup(player)
	local setupStatus = isSetup and "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" or "‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞..."
	self.DebugService:SendMessage(player, string.format("–ü–µ—Ä—Å–æ–Ω–∞–∂: %s", setupStatus))

	-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	if character then
		local humanoid = character:FindFirstChild("Humanoid")
		if humanoid then
			self.DebugService:SendMessage(player, "--- –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ---")
			self.DebugService:SendMessage(
				player,
				string.format("–°–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã: %.1f", humanoid.WalkSpeed)
			)
			self.DebugService:SendMessage(player, string.format("–°–∏–ª–∞ –ø—Ä—ã–∂–∫–∞: %.1f", humanoid.JumpPower))
		end

		local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
		if humanoidRootPart then
			local pos = humanoidRootPart.Position
			self.DebugService:SendMessage(
				player,
				string.format("–ü–æ–∑–∏—Ü–∏—è: %.1f, %.1f, %.1f", pos.X, pos.Y, pos.Z)
			)
		end
	end

	-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ—Ä—Ç–µ–π
	self.DebugService:SendMessage(player, "--- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---")
	self.DebugService:SendMessage(player, string.format("–°–º–µ—Ä—Ç–µ–π: %d", data.Statistics.Deaths))

	-- –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
	self.DebugService:SendMessage(player, "--- –ö–û–ú–ê–ù–î–´ ---")
	self.DebugService:SendMessage(player, "/damage 50 - –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω")
	self.DebugService:SendMessage(player, "/heal 100 - –ª–µ—á–µ–Ω–∏–µ")
	self.DebugService:SendMessage(player, "/regen - –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
	self.DebugService:SendMessage(player, "/kill - —É–±–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã
function CharacterCommands:SetWalkSpeed(player, speed)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local character = CharacterService:GetPlayerCharacter(player)
	if not character then
		self.DebugService:SendMessage(player, "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	local humanoid = character:FindFirstChild("Humanoid")
	if not humanoid then
		self.DebugService:SendMessage(player, "‚ùå Humanoid –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	speed = math.max(0, math.min(speed, 100)) -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
	humanoid.WalkSpeed = speed

	self.DebugService:SendMessage(player, string.format("üèÉ –°–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã: %.1f", speed))
end

-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—É –ø—Ä—ã–∂–∫–∞
function CharacterCommands:SetJumpPower(player, jumpPower)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local character = CharacterService:GetPlayerCharacter(player)
	if not character then
		self.DebugService:SendMessage(player, "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	local humanoid = character:FindFirstChild("Humanoid")
	if not humanoid then
		self.DebugService:SendMessage(player, "‚ùå Humanoid –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	jumpPower = math.max(0, math.min(jumpPower, 200)) -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É –ø—Ä—ã–∂–∫–∞
	humanoid.JumpPower = jumpPower

	self.DebugService:SendMessage(player, string.format("ü¶ò –°–∏–ª–∞ –ø—Ä—ã–∂–∫–∞: %.1f", jumpPower))
end

-- –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞–º–∏–Ω—É
function CharacterCommands:ConsumeStamina(player, amount)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	amount = math.max(1, math.min(amount, 1000))

	local success = CharacterService:ConsumeStamina(player, amount)
	if success then
		self.DebugService:SendMessage(player, string.format("‚ö° –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å—Ç–∞–º–∏–Ω—ã: %d", amount))
	else
		self.DebugService:SendMessage(player, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–∞–º–∏–Ω—ã!")
	end
end

-- –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ —Ç–æ—á–∫–µ —Å–ø–∞–≤–Ω–∞
function CharacterCommands:TeleportToSpawn(player, spawnName)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	local character = CharacterService:GetPlayerCharacter(player)
	if not character then
		self.DebugService:SendMessage(player, "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
	if not humanoidRootPart then
		self.DebugService:SendMessage(player, "‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	end

	-- –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞
	local spawnLocations = Constants.WORLD.SPAWN_LOCATIONS
	local spawnLocation = spawnLocations[spawnName:upper()]

	if not spawnLocation then
		self.DebugService:SendMessage(player, "‚ùå –¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " .. spawnName)
		self.DebugService:SendMessage(player, "–î–æ—Å—Ç—É–ø–Ω—ã–µ: MAIN, NORTH, SOUTH, EAST, WEST")
		return
	end

	-- –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º
	humanoidRootPart.CFrame = CFrame.new(spawnLocation.Position)
	self.DebugService:SendMessage(
		player,
		string.format("üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ %s (%s)", spawnLocation.Name, spawnName:upper())
	)
end

-- –°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
function CharacterCommands:ResetCharacter(player)
	local ServiceManager = self.DebugService:GetServiceManager()
	local CharacterService = ServiceManager:GetService("CharacterService")

	if not CharacterService then
		self.DebugService:SendMessage(player, "‚ùå CharacterService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
		return
	end

	-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	player:LoadCharacter()
	self.DebugService:SendMessage(player, "üîÑ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–±—Ä–æ—à–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
end

return CharacterCommands
